// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ArticleClient is the client API for Article service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ArticleClient interface {
	PublishArticle(ctx context.Context, in *PublishArticleReq, opts ...grpc.CallOption) (*ArticleInfoReply, error)
	GetArticle(ctx context.Context, in *ArticleIdReq, opts ...grpc.CallOption) (*ArticleInfoReply, error)
	ListArticles(ctx context.Context, in *PageReq, opts ...grpc.CallOption) (*ArticleInfosReply, error)
}

type articleClient struct {
	cc grpc.ClientConnInterface
}

func NewArticleClient(cc grpc.ClientConnInterface) ArticleClient {
	return &articleClient{cc}
}

func (c *articleClient) PublishArticle(ctx context.Context, in *PublishArticleReq, opts ...grpc.CallOption) (*ArticleInfoReply, error) {
	out := new(ArticleInfoReply)
	err := c.cc.Invoke(ctx, "/article.service.v1.Article/publishArticle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleClient) GetArticle(ctx context.Context, in *ArticleIdReq, opts ...grpc.CallOption) (*ArticleInfoReply, error) {
	out := new(ArticleInfoReply)
	err := c.cc.Invoke(ctx, "/article.service.v1.Article/getArticle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleClient) ListArticles(ctx context.Context, in *PageReq, opts ...grpc.CallOption) (*ArticleInfosReply, error) {
	out := new(ArticleInfosReply)
	err := c.cc.Invoke(ctx, "/article.service.v1.Article/listArticles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ArticleServer is the server API for Article service.
// All implementations must embed UnimplementedArticleServer
// for forward compatibility
type ArticleServer interface {
	PublishArticle(context.Context, *PublishArticleReq) (*ArticleInfoReply, error)
	GetArticle(context.Context, *ArticleIdReq) (*ArticleInfoReply, error)
	ListArticles(context.Context, *PageReq) (*ArticleInfosReply, error)
	mustEmbedUnimplementedArticleServer()
}

// UnimplementedArticleServer must be embedded to have forward compatible implementations.
type UnimplementedArticleServer struct {
}

func (UnimplementedArticleServer) PublishArticle(context.Context, *PublishArticleReq) (*ArticleInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishArticle not implemented")
}
func (UnimplementedArticleServer) GetArticle(context.Context, *ArticleIdReq) (*ArticleInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArticle not implemented")
}
func (UnimplementedArticleServer) ListArticles(context.Context, *PageReq) (*ArticleInfosReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListArticles not implemented")
}
func (UnimplementedArticleServer) mustEmbedUnimplementedArticleServer() {}

// UnsafeArticleServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ArticleServer will
// result in compilation errors.
type UnsafeArticleServer interface {
	mustEmbedUnimplementedArticleServer()
}

func RegisterArticleServer(s grpc.ServiceRegistrar, srv ArticleServer) {
	s.RegisterService(&Article_ServiceDesc, srv)
}

func _Article_PublishArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishArticleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).PublishArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/article.service.v1.Article/publishArticle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).PublishArticle(ctx, req.(*PublishArticleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Article_GetArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArticleIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).GetArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/article.service.v1.Article/getArticle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).GetArticle(ctx, req.(*ArticleIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Article_ListArticles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).ListArticles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/article.service.v1.Article/listArticles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).ListArticles(ctx, req.(*PageReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Article_ServiceDesc is the grpc.ServiceDesc for Article service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Article_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "article.service.v1.Article",
	HandlerType: (*ArticleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "publishArticle",
			Handler:    _Article_PublishArticle_Handler,
		},
		{
			MethodName: "getArticle",
			Handler:    _Article_GetArticle_Handler,
		},
		{
			MethodName: "listArticles",
			Handler:    _Article_ListArticles_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/article.proto",
}
